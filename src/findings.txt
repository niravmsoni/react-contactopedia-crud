63 and 64:
    Added basic folder structure. 
    Copied lot of basic code from previous project.
    Moved all components under Components folder.

65.
    Added skeleton code in all components.
    Created all components as a functional component except ContactIndex(Reason, we're wanting to use state here).
    We're going to be using state to perform CRUD operations

66. Add Contact.
        Creating a form in AddContact component
        Purely added UI here. State to manage contact will be added now.

67. Adding state to save Contact
    We'll be saving contact information in the form of State.
    IMP - Whenever we're wanting to use state, its' recommended to create it at the root component.
    So, that we can pass it to its child components as a Prop.
    In our case, ContactIndex = Class component.

    Setting initial value of state in the constructor.

    Created a hardCoded list of contacts and set them in contactList state component.
    Now, passed the contactList with a filter to 2 child components(FavoriteContact and GeneralContact)
    From both these components, called map() method and invoked Contact component.
    Contact component responsible for actually displaying the contact name

68. Updated UI in contact.jsx component.
    Added icons and styled them

69. Updated UI to show favorites and other contacts correctly

70.
    Create contact implementation
        - Contact fields(Name, Email and Phone) are present in AddContact.jsx
        - State is present in ContactIndex.jsx.
        - We need to find a way to pass contact details from AddContact.jsx to ContactIndex.jsx

        -We'll need to create local state in AddContact.jsx, to show if there was any validation? 
        - Convert AddContact.jsx to class component.
        - errorMessage and successMessage present in state.
        - Added form in AddContact.jsx
        - Create a handleAddContact arrow function in PARENT COMPONENT(ContactIndex) and call it from AddContact.jsx(ChildComponent)
