63 and 64:
    Added basic folder structure. 
    Copied lot of basic code from previous project.
    Moved all components under Components folder.

65.
    Added skeleton code in all components.
    Created all components as a functional component except ContactIndex(Reason, we're wanting to use state here).
    We're going to be using state to perform CRUD operations

66. Add Contact.
        Creating a form in AddContact component
        Purely added UI here. State to manage contact will be added now.

67. Adding state to save Contact
    We'll be saving contact information in the form of State.
    IMP - Whenever we're wanting to use state, its' recommended to create it at the root component.
    So, that we can pass it to its child components as a Prop.
    In our case, ContactIndex = Class component.

    Setting initial value of state in the constructor.

    Created a hardCoded list of contacts and set them in contactList state component.
    Now, passed the contactList with a filter to 2 child components(FavoriteContact and GeneralContact)
    From both these components, called map() method and invoked Contact component.
    Contact component responsible for actually displaying the contact name

68. Updated UI in contact.jsx component.
    Added icons and styled them

69. Updated UI to show favorites and other contacts correctly

70.
    Create contact implementation
        - Contact fields(Name, Email and Phone) are present in AddContact.jsx
        - State is present in ContactIndex.jsx.
        - We need to find a way to pass contact details from AddContact.jsx to ContactIndex.jsx

        -We'll need to create local state in AddContact.jsx, to show if there was any validation? 
        - Convert AddContact.jsx to class component.
        - errorMessage and successMessage present in state.
        - Added form in AddContact.jsx
        - Create a handleAddContact arrow function in PARENT COMPONENT(ContactIndex) and call it from AddContact.jsx(ChildComponent)

71.
    Added name properties to all fields in Addcontact.jsx
    In this function handleAddContactFormSubmit, extracted values & passed them as object to handleAddContact

    ContactIndex.jsx:
        Took object as input. Added Id and isFavorite property to object and set it to state using setState.
        Added new object to array list using concat method

72. Added validation
    Added code to validate in ContactIndex.jsx
        Duplicate, Empty Name and phone number.
        Returned validation object(status and message from ContactIndex.jsx) & consumed it in AddContact.jsx
        Captured the response in AddContact.jsx and set the local state in (AddContact.jsx)
    
73. Display Validation message on screen
    Added code to display validation on screen in AddContact.jsx

74. Toggle implementation
    Create a new function handler "handleToggleFavorite" in ContactIndex.jsx and pass it along to FavoriteContact & GeneralContact as a prop
    Pass the same prop to child component(Contact) from both FavoriteContact and GeneralContact
    So we formed a hierarchy here. For invoking a handler written in base component ContactIndex,
    we need to pass the function as a prop to FavoriteContact/GeneralContact and from there need to pass it down to Contact.jsx
    We cannot directly access handler written in ContactIndex from Contact.jsx

    Adding onClick on favorite button. Called the function & passed the contact prop as argument
    to function.
     onClick={() => props.favoriteClick(props.contact)}>
     Then checking the console, we see the function handler triggering 

     Now, making changes in ContactIndex.jsx.
     Setting state in ContactIndex file

75 & 76. Delete contact
    Followed same implementation as Favorite.
    Create handler in ContactIndex.jsx and passed that function as a prop to GeneralContact.jsx and FavoriteContact.jsx
    Passed prop to Contact.jsx and then wrote onClick event there to call the function written in ContactIndex.jsx


77. Adding random user to contact list
    Ideally, with react applications, there's a backend API which we use to show data on UI.
    For our example - Using - https://random-data-api.com/

    Since all state info is present in ContactIndex.jsx, creating a new function handler to pass data to RandomContact.jsx
    handleAddRandomContact()

    Copied and pasted existing addContact code in this function.
    Passed handleAddRandomContact as a prop to AddRandomContact.jsx

78. Using Axios to make API call
    Using this - https://axios-http.com/docs/intro
    Doing npm install
    $ npm install axios

    Instead of hardcoding URL, creating a new folder namely Utility> New file api.jsx
    Imported axios there and added a function call getRandomUser() there.
    Made API call to "https://random-data-api.com/api/v2/users?size=2&is_xml=true" endpoint

    Axios supports async await. So, awaited before capturing response and made method async

    Exported the function. Not under default but like this:
    export { getRandomUser };

    Imported the same getRandomUser in AddRandomContact.jsx and then created a function to call it
    Added async await keywords here as well.
    OnClick of GetRandomContact, added the call and logged response in console.

79. Extracting data from the response and adding to state
    Since we've passed handleAddRandomContact() as prop from ContactIndex,
    From AddRandomContact.jsx, added props as parameter and passed it along to function that makes axios call.
    So, then to add further, created anonymous object and returned it from the function like:

    return props.handleAddRandomContact({
    name: apiResponse.data.first_name + " " + apiResponse.data.last_name,
    email: apiResponse.data.email,
    phone: apiResponse.data.phone_number,
    });

    End to end - Add Random contact - Working now

80 and 81: Remove all Contact
    Added a new handler in ContactIndex.jsx and emptied the contactList.
    Passed that as prop to RemoveAllContact and then bound it with onClick event

82. Edit implementation
    Upon clicking on edit, the textboxes in form should be populated with existing data.
    Created 2 new properties in state(ContactIndex.jsx)
    Created a handler in ContactIndex.jsx namely handleUpdateClick and passed it along to FavoriteContact, GeneralContact and then to Contact.jsx.
    Bound it in Contact.jsx with onClick method and passed contact as parameter.
    Tested it with logging contact in handleUpdateClick and works fine

83. UI updates
    When use clicks on edit, need to change title in AddContact.
    So, passing selectedContact and isUpdating in props to AddContact.

    Add check in AddContact to update the title. {this.props.isUpdating} ? "Update contact": "Add a new Contact"
    In the textbox, set defaultValue with same condition as mentioned above in name property
    defaultValue={this.props.isUpdating ? this.props.selectedContact.name : ""}

    Similarly, added logi to display either "Create" or "Update" and "Cancel" based on this.props.isUpdating.
    Also, added a few css classes to facilitate this behavior

84. Cancel button
    ToDo: Remove update and bring back create screen.
    Set state items:
    isUpdating to false.
    selectedContact to undefined.
    Implement this logic in contactIndex.jsx and then pass it as prop to Contact.jsx.
    From AddContact.jsx, bound onClick event to call the same prop cancelUpdateContact()

85 and 86. Actual update
    Copied handleAddContactHandler method and created new handleUpdateContactHandler and removed duplication check logic.
    Then used map method to find the contact that is updated & update the state.
    Then, passed method as prop to AddContact.jsx.

    Then in addContact.jsx's handleAddContactFormSubmit() method, added a check as to whether isUpdating is true or false.
    if (isUpdating)
        Called handleAddContactHandler
    else
        Called handleUpdateContactHandler.

    Apart from this, for updating record, we need ID to be bound to hidden field.
    So, added a new hidden field and added name as contactId. Passed that along in the update call.
    Then it works
